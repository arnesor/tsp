[project]
name = "tsp"
version = "0.1.0"
description = "Code for solving and vizualising the Travelling Salesman Problem."
authors = [{ name = "Arne SÃ¸rli", email = "arnesor@users.noreply.github.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
dependencies = [
    "folium>=0.20.0",
    "geopy>=2.3.0",
    "highspy>=1.11.0",
    "matplotlib>=3.10.5",
    "networkx>=3.5",
    "numpy>=1.24.0",
    "pandas>=2.3.1",
    "pandas-stubs==2.3.0.250703",
    "pandera>=0.25.0",
    "pyomo>=6.9.2",
    "pyproj>=3.4.0",
    "pyscipopt>=5.5.0",
    "scipy>=1.16.1",
    "scipy-stubs==1.16.1.0",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "pre-commit>=4.2.0",
    "pre-commit-hooks>=5.0.0",
    "pytest>=8.4.1",
    "ruff>=0.12.7",
]

[project.scripts]
tsp = "tsp:main"

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py311"  # Minimum Python version supported
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "A",    # prevent using keywords that clobber python builtins
    "ANN",  # check type annotations
    "B",    # bugbear: security warnings
    "D",    # documentation
    "E",    # pycodestyle
    "F",    # pyflakes
    "ISC",  # implicit string concatenation
    "I",    # sort imports
    "UP",   # alert you when better syntax is available in your python version
    "RUF",  # the ruff developer's own rules
]
ignore = [
    "ANN202", # Don't requiere return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "D105",   # Don't require documenting magic methods.
    "FBT001", # Allow boolean positional arguments in a function.
    "FBT002", # Allow boolean default positional arguments in a function.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
    "PLR2004", # Allow to compare with unnamed numerical constants.
]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.lint.pylint]
max-args = 8

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001",  # type annotations don't add value for test functions
    "ANN002",  # type annotations don't add value for test functions
    "ANN003",  # type annotations don't add value for test functions
    "ANN201",  # type annotations don't add value for test functions
    "ANN204",  # type annotations don't add value for test functions
    "ANN205",  # type annotations don't add value for test functions
    "ANN206",  # type annotations don't add value for test functions
    "D100",    # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "S101",    # asserts are encouraged in pytest
]

[build-system]
requires = ["uv_build>=0.8.0,<0.9"]
build-backend = "uv_build"
